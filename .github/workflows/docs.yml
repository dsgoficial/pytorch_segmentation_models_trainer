name: Deploy Documentation

on:
  # Trigger on push to main branch
  push:
    branches: [main, master]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'pytorch_segmentation_models_trainer/**/*.py'  # Rebuild on code changes for API docs
      - '.github/workflows/docs.yml'
  
  # Allow manual triggering
  workflow_dispatch:
  
  # Trigger on pull requests for testing (but don't deploy)
  pull_request:
    branches: [main, master]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'

# Set permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build documentation
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for git info

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material mkdocstrings[python] mkdocs-jupyter
          # Install your package for API documentation
          cd docs && pip install -e .

      - name: Configure Git for mkdocs
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Build documentation
        run: mkdocs build --strict

      - name: Upload documentation artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

  # Deploy to GitHub Pages (only on main branch)
  deploy:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  # Test documentation build on PRs (without deploying)
  test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material mkdocstrings[python] mkdocs-jupyter
          pip install -e .

      - name: Test documentation build
        run: mkdocs build --strict

      - name: Test internal links
        run: |
          # Install link checker
          pip install mkdocs-linkcheck
          # Check for broken internal links
          mkdocs build --strict --site-dir test_site
          
      - name: Comment PR with preview info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ“š Documentation build successful! The changes look good and ready to be deployed.'
            })