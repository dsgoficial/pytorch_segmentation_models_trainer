# @package _group_
pl_model:
  _target_: pytorch_segmentation_models_trainer.model_loader.frame_field_model.FrameFieldSegmentationPLModel
model:
  _target_: pytorch_segmentation_models_trainer.model_loader.frame_field_model.FrameFieldModel
  segmentation_model:
    _target_: segmentation_models_pytorch.Unet
    encoder_name: ${backbone.name}
    encoder_weights: imagenet
    in_channels: 3
    classes: ${hyperparameters.classes}
    activation: sigmoid
  seg_params: ${seg_params}
  compute_seg: ${compute_seg}
  compute_crossfield: ${compute_crossfield}
compute_seg: true
compute_crossfield: true
device: cpu
seg_params:
  compute_interior: true
  compute_edge: true
  compute_vertex: false
loss_params:
  multiloss:
    normalization_params:
      min_samples: 10
      max_samples: 1000
    coefs:
      epoch_thresholds:
      - 0
      - 5
      - 10
      seg: 10
      crossfield_align: 1.0
      crossfield_align90: 0.2
      crossfield_smooth: 0.005
      seg_interior_crossfield:
      - 0
      - 0
      - 0.2
      seg_edge_crossfield:
      - 0
      - 0
      - 0.2
      seg_edge_interior:
      - 0
      - 0
      - 0.2
  seg_loss_params:
    bce_coef: 0.75
    dice_coef: 0.25
    use_dist: true
    use_size: false
    w0: 50.0
    sigma: 10.0
optimizer:
  _target_: torch.optim.AdamW
  lr: ${hyperparameters.max_lr}
  weight_decay: 0.001
hyperparameters:
  model_name: unet
  backbone: ${backbone.name}
  batch_size: 16
  epochs: 30
  max_lr: 0.01
  classes: 1
scheduler_list:
- scheduler:
    _target_: torch.optim.lr_scheduler.OneCycleLR
    max_lr: ${hyperparameters.max_lr}
    steps_per_epoch: 5161
    epochs: ${hyperparameters.epochs}
  name: learning_rate
  interval: step
  frequency: 1
  monitor: avg_val_loss
callbacks:
- _target_: pytorch_lightning.callbacks.LearningRateMonitor
  logging_interval: step
- _target_: pytorch_segmentation_models_trainer.custom_callbacks.image_callbacks.FrameFieldResultCallback
pl_trainer:
  stochastic_weight_avg: true
  sync_batchnorm: true
  max_epochs: ${hyperparameters.epochs}
  gpus: -1
  precision: 32
  default_root_dir: /experiment_data/${backbone.name}_${hyperparameters.model_name}
backbone:
  name: resnet152
  input_width: 224
  input_height: 224
train_dataset:
  _target_: pytorch_segmentation_models_trainer.dataset_loader.dataset.FrameFieldSegmentationDataset
  input_csv_path: /data/dsg_dataset_train.csv
  root_dir: /data
  gpu_augmentation_list:
  - _target_: kornia.augmentation.ColorJitter
    brightness: 0.1
    contrast: 0.2
    saturation: 0.1
    hue: 0.1
    p: 0.6
  augmentation_list:
  - _target_: albumentations.RandomCrop
    always_apply: true
    height: ${backbone.input_width}
    width: ${backbone.input_height}
    p: 1.0
  - _target_: albumentations.Flip
    p: 0.5
  - _target_: albumentations.Normalize
    p: 1.0
  - _target_: albumentations.pytorch.transforms.ToTensorV2
    always_apply: true
  return_distance_mask: ${loss_params.seg_loss_params.use_dist}
  return_size_mask: ${loss_params.seg_loss_params.use_size}
  image_width: ${backbone.input_width}
  image_height: ${backbone.input_height}
  data_loader:
    shuffle: true
    num_workers: 6
    pin_memory: true
    drop_last: true
    prefetch_factor: ${hyperparameters.batch_size}
val_dataset:
  _target_: pytorch_segmentation_models_trainer.dataset_loader.dataset.FrameFieldSegmentationDataset
  input_csv_path: /data/dsg_dataset_test.csv
  root_dir: /data
  augmentation_list:
  - _target_: albumentations.CenterCrop
    always_apply: true
    height: ${backbone.input_width}
    width: ${backbone.input_height}
    p: 1.0
  - _target_: albumentations.Normalize
    p: 1.0
  - _target_: albumentations.pytorch.transforms.ToTensorV2
    always_apply: true
  return_distance_mask: ${loss_params.seg_loss_params.use_dist}
  return_size_mask: ${loss_params.seg_loss_params.use_size}
  image_width: ${backbone.input_width}
  image_height: ${backbone.input_height}
  data_loader:
    shuffle: false
    num_workers: 8
    pin_memory: true
    drop_last: true
    prefetch_factor: ${hyperparameters.batch_size}
metrics:
- _target_: torchmetrics.Accuracy
- _target_: torchmetrics.F1Score
- _target_: torchmetrics.Precision
- _target_: torchmetrics.Recall
