# @package _group_
model:
  _target_: segmentation_models_pytorch.Unet
  encoder_name: resnet34
  encoder_weights: imagenet
  in_channels: 3
  classes: 1
  activation: 'sigmoid'

callbacks:
  - _target_: pytorch_segmentation_models_trainer.custom_callbacks.training_callbacks.WarmupCallback
    warmup_epochs: 1
  - _target_: pytorch_segmentation_models_trainer.custom_callbacks.image_callbacks.ImageSegmentationResultCallback
    n_samples: 1

loss:
  _target_: segmentation_models_pytorch.utils.losses.DiceLoss

optimizer:
  _target_: torch.optim.AdamW
  lr: 0.001
  weight_decay: 1e-4

metrics:
  - _target_: torchmetrics.F1
  - _target_: torchmetrics.Precision
  - _target_: torchmetrics.Recall

hyperparameters:
  batch_size: 1
  epochs: 3
  max_lr: 0.1

pl_trainer:
  max_epochs: ${hyperparameters.epochs}
  gpus: 0

train_dataset:
  _target_: pytorch_segmentation_models_trainer.dataset_loader.dataset.SegmentationDataset
  input_csv_path: teste
  data_loader:
    shuffle: True
    num_workers: 2
    pin_memory: True
    drop_last: True
    prefetch_factor: 2
  augmentation_list:
    - _target_: albumentations.HueSaturationValue
      always_apply: false
      hue_shift_limit: 0.2
      p: 0.5
    - _target_: albumentations.RandomBrightnessContrast
      brightness_limit: 0.2
      contrast_limit: 0.2
      p: 0.5
    - _target_: albumentations.RandomCrop
      always_apply: true
      height: 256
      width: 256
      p: 1.0
    - _target_: albumentations.Flip
      always_apply: true
    - _target_: albumentations.Normalize
      p: 1.0
    - _target_: albumentations.pytorch.transforms.ToTensorV2
      always_apply: true

val_dataset:
  _target_: pytorch_segmentation_models_trainer.dataset_loader.dataset.SegmentationDataset
  input_csv_path: teste
  data_loader:
    shuffle: False
    num_workers: 2
    pin_memory: True
    drop_last: True
    prefetch_factor: 2
  augmentation_list:
    - _target_: albumentations.Resize
      always_apply: true
      height: 256
      width: 256
      p: 1.0
    - _target_: albumentations.Normalize
      p: 1.0
    - _target_: albumentations.pytorch.transforms.ToTensorV2
      always_apply: true
